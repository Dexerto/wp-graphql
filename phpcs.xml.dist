<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="WPGraphQL" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">
	<description>Coding standards for the WPGraphQL plugin</description>


	<!-- What to scan: include any root-level PHP files, and the /src folder -->
	<file>./access-functions.php</file>
	<file>./activation.php</file>
	<file>./deactivation.php</file>
	<file>./wp-graphql.php</file>
	<file>./src</file>
	<exclude-pattern>*/**/tests/</exclude-pattern>
	<exclude-pattern>*/node_modules/*</exclude-pattern>
	<exclude-pattern>*/vendor/*</exclude-pattern>

	<!--
	Prevent errors caused by WordPress Coding Standards not supporting PHP 8.0+.
	See: https://github.com/WordPress/WordPress-Coding-Standards/issues/2035
	See: https://github.com/WordPress/WordPress-Coding-Standards/issues/2035#issuecomment-1325532520
	-->
	<ini name="error_reporting" value="E_ALL &#38; ~E_DEPRECATED" />

	<!--How to scan: include CLI args so you don't need to pass them manually -->
	<!--Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!--
		p flag: Show progress of the run.
		s flag: Show sniff codes in all reports.
	-->
	<arg value="sp"/>
	<!-- Strip the file paths down to the relevant bit -->
	<arg name="basepath" value="./"/>
	<!-- Enable colors in report -->
	<arg name="colors" />
	<!-- Only lint php files by default -->
	<arg name="extensions" value="php" />
	<!-- Whenever possible, cache the scan results and re-use those for unchanged files on the next scan. -->
	<arg name="cache" value="tests/_output/cache.json" />
	<!-- Check 20 files in parallel. -->
	<arg name="parallel" value="20" />
	<!-- Set severity to 1 to see everything that isn't effectively turned off. -->
	<arg name="severity" value="1" />

	<!-- Ruleset Config: set these to match your project constraints-->

	<!--
		Tests for PHP version compatibility.
		https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards#Recomended-additional-rulesets
	-->
	<config name="testVersion" value="7.1-"/>

	<!--
		Tests for WordPress version compatibility.
		https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties
	-->
	<config name="minimum_supported_wp_version" value="5.0"/>

	<!-- Individual rule configuration -->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="wp-graphql" />
			</property>
		</properties>
	</rule>

	<!-- Rules -->

	<!-- Load PHPCompatibilityWP standards -->
	<rule ref="PHPCompatibilityWP" />

	<!-- Load WordPress VIP Go standards - for use with projects on the (newer) VIP Go platform. -->
	<rule ref="WordPress-VIP-Go" />

	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration.SpaceAfterFunction"/>

	<!-- Load WordPress Coding standards -->
	<rule ref="WordPress">
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
		<!-- This would be a breaking change to fix-->
		<exclude name="WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid" />
		<!-- Conflicts with b/c in AbstractConnectionResolver -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidNoReturn" />
		<!-- Definitely should not be added back -->
		<exclude name="WordPress.CodeAnalysis.AssignmentInCondition.Found"/>
		<exclude name="WordPress.PHP.DisallowShortTernary.Found"/>

		<!-- Should probably not be added back -->
		<exclude name="PHPCompatibility.Keywords.ForbiddenNamesAsDeclared.objectFound"/>
		<exclude name="Squiz.PHP.DisallowMultipleAssignments.FoundInControlStructure"/>
		<exclude name="WordPress.DateTime.RestrictedFunctions.date_date"/>
		<exclude name="WordPress.Files.FileName"/>
		<exclude name="WordPress.NamingConventions.ValidVariableName"/>

		<!-- Should maybe Add Back Later -->
		<exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
		<exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
		<exclude name="WordPress.WP.I18n.MissingTranslatorsComment"/>
	</rule>

	<!-- Tests for inline documentation of code -->
	<rule ref="WordPress-Docs">
		<exclude name="Generic.Commenting.DocComment.MissingShort"/>

		<!-- Should be re-enabled -->
		<exclude name="Squiz.Commenting"/>
	</rule>

	<!-- Enforce short array syntax -->
	<rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

	<!-- Use FQCN for PHPDoc types -->
	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
	<!-- Enforce static closures -->
	<rule ref="SlevomatCodingStandard.Functions.StaticClosure" />
</ruleset>
